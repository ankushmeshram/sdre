package isreal.semantic;

option java_package = "de.dfki.isreal.network.protos";
option java_outer_classname = "ExchangeDataProtos";

message ISRealMessage {

	enum MSGType {
		SENSOR_EVENT = 4;
		ANIMATION_CALL = 6;
		MAINTENANCE = 7;
		QUERY = 8;
		ANSWER = 9;
		DEMONSTRATOR_MSG = 10;
		INIT_ACK = 11;
		INIT_REGISTER_CLIENT = 12;
		SERVICE_CALL = 13;
		KEEP_ALIVE = 14;
		AGENT_QUERY = 15;
		AGENT_MAINTENANCE = 16;
		RESET = 17;
		ERROR = 18;
  	}

	required MSGType msg_type = 1;
	optional SensorEvent sensorevent = 6;
	optional AnimationCall animationcall = 8;
	optional ISRealMaintenance maintenance = 9;
	optional ISRealQuery query = 10;
	optional ISRealAnswer answer = 11;
	optional DemonstratorMessage dmsg = 12;
	optional string client_name = 13;
	optional ServiceCall servicecall = 14;
	optional AgentQuery a_query = 15;
	optional AgentMaintenance a_maintenance = 16;
	optional string error_message = 17;
}

message MetadataRecord {
  required string node_id = 1;
  required string object = 2;
  repeated string concepts = 3;
  repeated string services = 4;
  repeated string automata = 5;
  repeated string dependent_objects = 6;
}

message Statement {
	required string subject = 1;
	required string predicate = 2;
	required string object = 3;
}

message StatementList {
	repeated Statement statements = 1;
}

message SensorEvent {
	enum SensorType {
	    PERCEPTION = 0;
    	ZONE_IN = 1;
		ZONE_OUT = 2;
    	SCRIPT = 3; 
	}
	required SensorType type = 3;
	optional string agent = 2;
	repeated MetadataRecord record = 4;
	repeated Statement inserts = 5;
	repeated Statement removes = 6;
}

message AnimationCall {
	optional int32 animation_id = 1;
	required string animation_name = 2;
	repeated string params = 3;
	required bool ack = 4;
}

message ISRealMaintenance {
	enum MaintenanceTask {
		INSERT_SERVICE = 1;
		INSERT_STATEMENT = 2;
		REMOVE_SERVICE = 3;
		REMOVE_STATEMENTS = 4;
		UPDATE_STATEMENTS = 5;
		INIT_FROM_FILES = 6;
		REGISTER_EVENTHANDLERS = 7;
		UNREGISTER_EVENTHANDLERS = 8;
	}
	required MaintenanceTask type = 1;

	repeated Statement statements = 2;
	repeated string strings = 3;
	repeated MaintenanceEventHandler eventhandlers = 4;
}

message MaintenanceEventHandler {
	required int32 handler_id = 1;
	optional string type = 2;
	optional MetadataRecord object = 3;
	repeated string parameters = 4;
}

message AgentMaintenance {
	required string agent = 1;
	required ISRealMaintenance maintenance = 2;
}

message ParameterAssignment {
	required string key = 1;
	required string value = 2;
}

message ISRealQuery {
	required int32 query_id = 1;
	enum QueryType {
	    SPARQL_ASK = 0;
    	SPARQL_SELECT = 1;
		SPARQL_CONSTRUCT = 2;
    	SPARQLDL = 3;
		CHECK_CONSISTENCY = 4;
		CHECK_CLASS_CONSISTENCY = 5;
		PERCEPTION = 6;
		CHECK_CLASS_DISJUNCTION = 7;
		CHECK_CLASS_EQUIVALENCE = 8;
		CHECK_CLASS_SUBSUMPTION = 9;
		STAR = 10;
		INSTANCE_CHECKING = 13;
		GET_SERVICE_DESCRIPTION = 14;
		GET_INTERACTION_SERVICES = 15;
		GET_AGENT_SERVICES = 16;
		GET_ALL_SERVICES = 19;
		GET_SERVICE_INPUTS = 17;
		GET_REPORT = 18;
		CLASSIFY = 19;
		REALIZE = 20;
		LIST_STATEMENTS = 21;
		GET_SE_SERVICES = 22;
		ACTION_QUERY = 23;
	}
	required QueryType q_type = 2;
	repeated string strings = 5;
	optional int32 int_value = 6;
	optional bool bool_value = 7;	
	repeated ParameterAssignment params = 8;
}

message AgentQuery {
	required string agent = 1;
	required ISRealQuery query = 2;
}

message ISRealAnswer {
	required int32 query_id = 1;

	optional bool bool_val = 3;
	repeated Statement statements = 4;
	repeated Binding bindings = 5;
	repeated string strings = 6;
	repeated StatementList statement_lists = 2;
}

message Binding {
	repeated Substitution substitutions = 1;
}

message Substitution {
	required string variable = 1;
	required string value = 2;
}

message ServiceCall {
	required string service_name = 1;
	required Binding bnd = 2;
}

message DemonstratorMessage {
	optional bool speech = 1;
	enum Component {
		GSE = 1;
		GRAPHIC = 2;
		AGENT = 3;
		LSE = 4;
		QUERY = 5;
	}
	required Component comp = 2;
	enum DMsgType {
		PERC = 11;
		INIT = 12;
		PLANNING = 13;
		EXECUTION = 14;
		COMMUNICATION = 15;
	}
	required DMsgType type = 3;
	required string msg = 4;
	optional string sender = 5;
	optional string receiver = 6;
}
